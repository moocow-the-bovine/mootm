# -*- Mode: Shell-Script -*-
#
# Getopt::Gen specification for moot
#-----------------------------------------------------------------------------
program "mootm"
#program_version "0.01"

purpose	"Morphological analyzer for moocow's part-of-speech tagger."
author  "Bryan Jurish <jurish@uni-potsdam.de>"
on_reparse "warn"

#-----------------------------------------------------------------------------
# Details
#-----------------------------------------------------------------------------
details "
'mootm' is a morphological analyzer
program based on the 'libmoot' library, using Thomas
Hanneforth's FSM library for representation and manipulation
of the underlying finite-state machines.

It takes as its input one or more 'rare' or 'medium' (+/-tagged,-analyzed)
text files, and outputs 'medium rare' or 'well done' (+analzed) text files,
respectively.  See mootfiles(5) for details on moot file formats.
"

#-----------------------------------------------------------------------------
# Files
#-----------------------------------------------------------------------------
rcfile "/etc/mootmrc"
rcfile "~/.mootmrc"


#-----------------------------------------------------------------------------
# Arguments
#-----------------------------------------------------------------------------
argument "INPUT(s)" "Input files / file-lists / words." \
    details="See the '--list' and '--words' options."

#-----------------------------------------------------------------------------
# Options
#-----------------------------------------------------------------------------
#group "Basic Options"
int "verbose" v "Verbosity level." \
    arg="LEVEL" \
    default="3" \
    details="
Be more or less verbose.  Recognized values are in the range 0..5:

=over 4

=item '0'

Be as silent as possbile.

=item '1'

Report runtime errors.

=item '2'

Report basic progess to stderr.

=item '3'

Report summary and timing information to stderr.

=item '4'

Report runtime warnings.

=item '5'

Report everything.

=back

"

int   "dots"   d  "Print a dot for every NTOKS tokens processed." \
    arg="NTOKS" \
    default="0" \
    details="Zero (the default) means that no dots will be printed."

flag  "words"  w  "INPUTs are input tokens, not filenames." \
    details="Useful for testing."

flag  "list"   l  "INPUTs are file-lists, not filenames." \
    details="Useful for large batch-processing jobs."

string "output"	o "Specify output file (default=stdout)." \
    arg="FILE" \
    default="-"

#---------------------------------------------------
# I/O format options
#---------------------------------------------------
group "I/O Format Options"

flag "escapes"   E  "Honor AT&T regex escapes in input." \
    details="Currently only supported by GFSM and GFSMXL." \
    default="0"

flag "att"       a "Produce AT&T-style output format." \
    details="Currently only makes a difference for GFSM and GFSMXL." \
    default="1" \

#flag "mabbaw" b "Produce MABBAW-style output (1 line/analysis)" \
#    details="Produces output in the format generated by Thomas Hanneforth's mabbaw program."

flag "reanalyze" r "Force re-analysis of pre-analyzed tokens." \
    details="Useful if you want to add additional analyses to preprocessor output."

#flag "dequote"   q "Auto-dequote output tags." \
#    details="For compatibility."

flag  "first-is-best" 1 "Assume 1st analysis is 'best' for each input token." \
    details="Useful for re-analysis & class-based training with mootrain(1)."

flag  "ignore-first" 2 "Ignore the first analysis for each input token." \
    details="Useful for re-analysis & class-based training with mootrain(1)."


#---------------------------------------------------
# Morphology Options
#---------------------------------------------------
group "Morphology Options"

string "symbols" s "Specify morphological symbols file." \
    arg="FILE" \
    default="moot.sym" \
    edefault="moot_SYMBOLS" \
    details="
This symbols file will be used to analyze input-tokens and
to generate output strings.
"

string "morph" m "Specify morphological transducer." \
    arg="FILE" \
    default="moot.fst" \
    edefault="moot_MORPH" \
    details="
This file should contain a finite-state transducer to be
used for morphological analysis.
"

#string "tagx" x "Specify tag-extraction transducer." \
#    arg="FILE" \
#    details="
#This file should contain a finite-state transducer which extracts
#PoS tags from the output-tape of the morphological transducer.
#If unspecified, the morphological transducer is itself expected to
#output PoS tags.
#
#Warning: use of a tag-extraction FST slows down analysis time
#immensely.
#"
#
#This is in part due to a bug in the C++ FSM library.
#It should nonetheless work correctly, due to heroic efforts on
#the part of the author of this program.

string "eow" e "Specify implicit EOW string." \
  arg="STRING" \
  default="" \
  edefault="moot_EOW" \
  details="
If specified, STRING is an end-of-word marker which
will be implicitly appended to the text of each input token
before transducer lookup.
"

#-----------------------------------------------------------------------------
# Addenda
#-----------------------------------------------------------------------------
#addenda

#-----------------------------------------------------------------------------
# Bugs
#-----------------------------------------------------------------------------
bugs "

Probably many.

"

#-----------------------------------------------------------------------------
# Footer
#-----------------------------------------------------------------------------
acknowledge `cat acknowledge.pod`

seealso "mootpp(1), moot(1), mootfiles(5)"
